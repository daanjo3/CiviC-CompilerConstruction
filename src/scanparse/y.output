Terminals unused in grammar

   COMMENT_SINGLE
   COMMENT_MULT


State 173 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: declaration declarations
    3             | declaration

    4 declaration: fundefdec
    5            | globaldec
    6            | globaldef

    7 fundefdec: EXPORT type ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
    8          | EXPORT type ID BRACKET_L BRACKET_R param BRACE_L funbody BRACE_R
    9          | type ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type ID BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R
   11          | EXTERN type ID BRACKET_L BRACKET_R SEMICOLON
   12          | EXTERN type ID BRACKET_L param BRACKET_R SEMICOLON

   13 globaldec: EXTERN type ID SEMICOLON

   14 globaldef: EXPORT type ID LET expr SEMICOLON
   15          | EXPORT type ID SEMICOLON
   16          | type ID LET expr SEMICOLON
   17          | type ID SEMICOLON

   18 param: type ID COMMA param
   19      | type ID

   20 type: TYPE_INT
   21     | TYPE_FLOAT
   22     | TYPE_BOOL
   23     | TYPE_VOID

   24 funbody: vardecs localfundefs statements
   25        | vardecs localfundefs
   26        | vardecs statements
   27        | localfundefs statements
   28        | vardecs
   29        | localfundefs
   30        | statements

   31 vardecs: vardecs type ID LET expr SEMICOLON
   32        | vardecs type ID SEMICOLON
   33        | type ID LET expr SEMICOLON
   34        | type ID SEMICOLON

   35 localfundefs: fundefdec localfundefs
   36             | fundefdec

   37 statements: stmt statements
   38           | stmt

   39 stmt: var LET expr SEMICOLON
   40     | funcall SEMICOLON
   41     | WHILE BRACKET_L expr BRACKET_R block
   42     | DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON
   43     | if
   44     | for
   45     | RETURN expr SEMICOLON

   46 for: FOR BRACKET_L TYPE_INT var LET expr COMMA expr COMMA expr BRACKET_R block
   47    | FOR BRACKET_L TYPE_INT var LET expr COMMA expr BRACKET_R block

   48 if: IF BRACKET_L expr BRACKET_R block ELSE block
   49   | IF BRACKET_L expr BRACKET_R block

   50 block: BRACE_L statements BRACE_R
   51      | stmt

   52 exprs: expr COMMA exprs
   53      | expr

   54 expr: BRACKET_L expr BRACKET_R
   55     | binop
   56     | monop
   57     | cast
   58     | var
   59     | funcall
   60     | FLOAT
   61     | NUM
   62     | TRUEVAL
   63     | FALSEVAL

   64 cast: BRACKET_L type BRACKET_R expr

   65 funcall: var BRACKET_L exprs BRACKET_R

   66 monop: MINUS expr
   67      | NOT expr

   68 binop: expr PLUS expr
   69      | expr MINUS expr
   70      | expr STAR expr
   71      | expr SLASH expr
   72      | expr PERCENT expr
   73      | expr LE expr
   74      | expr LT expr
   75      | expr GE expr
   76      | expr GT expr
   77      | expr EQ expr
   78      | expr NE expr
   79      | expr OR expr
   80      | expr AND expr

   81 var: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
TYPE_BOOL (258) 22
TYPE_INT (259) 20 46 47
TYPE_VOID (260) 23
TYPE_FLOAT (261) 21
BRACKET_L (262) 7 8 9 10 11 12 41 42 46 47 48 49 54 64 65
BRACKET_R (263) 7 8 9 10 11 12 41 42 46 47 48 49 54 64 65
BRACE_L (264) 7 8 9 10 50
BRACE_R (265) 7 8 9 10 50
COMMA (266) 18 46 47 52
SEMICOLON (267) 11 12 13 14 15 16 17 31 32 33 34 39 40 42 45
MINUS (268) 66 69
PLUS (269) 68
STAR (270) 70
SLASH (271) 71
PERCENT (272) 72
LE (273) 73
LT (274) 74
GE (275) 75
GT (276) 76
EQ (277) 77
NE (278) 78
AND (279) 80
OR (280) 79
NOT (281) 67
LET (282) 14 16 31 33 39 46 47
DO (283) 42
WHILE (284) 41 42
FOR (285) 46 47
IF (286) 48 49
ELSE (287) 48
RETURN (288) 45
EXTERN (289) 11 12 13
EXPORT (290) 7 8 14 15
TRUEVAL (291) 62
FALSEVAL (292) 63
COMMENT_SINGLE (293)
COMMENT_MULT (294)
NUM (295) 61
FLOAT (296) 60
ID (297) 7 8 9 10 11 12 13 14 15 16 17 18 19 31 32 33 34 81


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
declarations (45)
    on left: 2 3, on right: 1 2
declaration (46)
    on left: 4 5 6, on right: 2 3
fundefdec (47)
    on left: 7 8 9 10 11 12, on right: 4 35 36
globaldec (48)
    on left: 13, on right: 5
globaldef (49)
    on left: 14 15 16 17, on right: 6
param (50)
    on left: 18 19, on right: 8 10 12 18
type (51)
    on left: 20 21 22 23, on right: 7 8 9 10 11 12 13 14 15 16 17 18
    19 31 32 33 34 64
funbody (52)
    on left: 24 25 26 27 28 29 30, on right: 7 8 9 10
vardecs (53)
    on left: 31 32 33 34, on right: 24 25 26 28 31 32
localfundefs (54)
    on left: 35 36, on right: 24 25 27 29 35
statements (55)
    on left: 37 38, on right: 24 26 27 30 37 50
stmt (56)
    on left: 39 40 41 42 43 44 45, on right: 37 38 51
for (57)
    on left: 46 47, on right: 44
if (58)
    on left: 48 49, on right: 43
block (59)
    on left: 50 51, on right: 41 42 46 47 48 49
exprs (60)
    on left: 52 53, on right: 52 65
expr (61)
    on left: 54 55 56 57 58 59 60 61 62 63, on right: 14 16 31 33 39
    41 42 45 46 47 48 49 52 53 54 64 66 67 68 69 70 71 72 73 74 75
    76 77 78 79 80
cast (62)
    on left: 64, on right: 57
funcall (63)
    on left: 65, on right: 40 59
monop (64)
    on left: 66 67, on right: 56
binop (65)
    on left: 68 69 70 71 72 73 74 75 76 77 78 79 80, on right: 55
var (66)
    on left: 81, on right: 39 46 47 58 65


State 0

    0 $accept: . program $end

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    EXTERN      shift, and go to state 5
    EXPORT      shift, and go to state 6

    program       go to state 7
    declarations  go to state 8
    declaration   go to state 9
    fundefdec     go to state 10
    globaldec     go to state 11
    globaldef     go to state 12
    type          go to state 13


State 1

   22 type: TYPE_BOOL .

    $default  reduce using rule 22 (type)


State 2

   20 type: TYPE_INT .

    $default  reduce using rule 20 (type)


State 3

   23 type: TYPE_VOID .

    $default  reduce using rule 23 (type)


State 4

   21 type: TYPE_FLOAT .

    $default  reduce using rule 21 (type)


State 5

   11 fundefdec: EXTERN . type ID BRACKET_L BRACKET_R SEMICOLON
   12          | EXTERN . type ID BRACKET_L param BRACKET_R SEMICOLON
   13 globaldec: EXTERN . type ID SEMICOLON

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4

    type  go to state 14


State 6

    7 fundefdec: EXPORT . type ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
    8          | EXPORT . type ID BRACKET_L BRACKET_R param BRACE_L funbody BRACE_R
   14 globaldef: EXPORT . type ID LET expr SEMICOLON
   15          | EXPORT . type ID SEMICOLON

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4

    type  go to state 15


State 7

    0 $accept: program . $end

    $end  shift, and go to state 16


State 8

    1 program: declarations .

    $default  reduce using rule 1 (program)


State 9

    2 declarations: declaration . declarations
    3             | declaration .

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    EXTERN      shift, and go to state 5
    EXPORT      shift, and go to state 6

    $default  reduce using rule 3 (declarations)

    declarations  go to state 17
    declaration   go to state 9
    fundefdec     go to state 10
    globaldec     go to state 11
    globaldef     go to state 12
    type          go to state 13


State 10

    4 declaration: fundefdec .

    $default  reduce using rule 4 (declaration)


State 11

    5 declaration: globaldec .

    $default  reduce using rule 5 (declaration)


State 12

    6 declaration: globaldef .

    $default  reduce using rule 6 (declaration)


State 13

    9 fundefdec: type . ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type . ID BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R
   16 globaldef: type . ID LET expr SEMICOLON
   17          | type . ID SEMICOLON

    ID  shift, and go to state 18


State 14

   11 fundefdec: EXTERN type . ID BRACKET_L BRACKET_R SEMICOLON
   12          | EXTERN type . ID BRACKET_L param BRACKET_R SEMICOLON
   13 globaldec: EXTERN type . ID SEMICOLON

    ID  shift, and go to state 19


State 15

    7 fundefdec: EXPORT type . ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
    8          | EXPORT type . ID BRACKET_L BRACKET_R param BRACE_L funbody BRACE_R
   14 globaldef: EXPORT type . ID LET expr SEMICOLON
   15          | EXPORT type . ID SEMICOLON

    ID  shift, and go to state 20


State 16

    0 $accept: program $end .

    $default  accept


State 17

    2 declarations: declaration declarations .

    $default  reduce using rule 2 (declarations)


State 18

    9 fundefdec: type ID . BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type ID . BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R
   16 globaldef: type ID . LET expr SEMICOLON
   17          | type ID . SEMICOLON

    BRACKET_L  shift, and go to state 21
    SEMICOLON  shift, and go to state 22
    LET        shift, and go to state 23


State 19

   11 fundefdec: EXTERN type ID . BRACKET_L BRACKET_R SEMICOLON
   12          | EXTERN type ID . BRACKET_L param BRACKET_R SEMICOLON
   13 globaldec: EXTERN type ID . SEMICOLON

    BRACKET_L  shift, and go to state 24
    SEMICOLON  shift, and go to state 25


State 20

    7 fundefdec: EXPORT type ID . BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
    8          | EXPORT type ID . BRACKET_L BRACKET_R param BRACE_L funbody BRACE_R
   14 globaldef: EXPORT type ID . LET expr SEMICOLON
   15          | EXPORT type ID . SEMICOLON

    BRACKET_L  shift, and go to state 26
    SEMICOLON  shift, and go to state 27
    LET        shift, and go to state 28


State 21

    9 fundefdec: type ID BRACKET_L . BRACKET_R BRACE_L funbody BRACE_R
   10          | type ID BRACKET_L . param BRACKET_R BRACE_L funbody BRACE_R

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    BRACKET_R   shift, and go to state 29

    param  go to state 30
    type   go to state 31


State 22

   17 globaldef: type ID SEMICOLON .

    $default  reduce using rule 17 (globaldef)


State 23

   16 globaldef: type ID LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 40
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 24

   11 fundefdec: EXTERN type ID BRACKET_L . BRACKET_R SEMICOLON
   12          | EXTERN type ID BRACKET_L . param BRACKET_R SEMICOLON

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    BRACKET_R   shift, and go to state 46

    param  go to state 47
    type   go to state 31


State 25

   13 globaldec: EXTERN type ID SEMICOLON .

    $default  reduce using rule 13 (globaldec)


State 26

    7 fundefdec: EXPORT type ID BRACKET_L . BRACKET_R BRACE_L funbody BRACE_R
    8          | EXPORT type ID BRACKET_L . BRACKET_R param BRACE_L funbody BRACE_R

    BRACKET_R  shift, and go to state 48


State 27

   15 globaldef: EXPORT type ID SEMICOLON .

    $default  reduce using rule 15 (globaldef)


State 28

   14 globaldef: EXPORT type ID LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 49
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 29

    9 fundefdec: type ID BRACKET_L BRACKET_R . BRACE_L funbody BRACE_R

    BRACE_L  shift, and go to state 50


State 30

   10 fundefdec: type ID BRACKET_L param . BRACKET_R BRACE_L funbody BRACE_R

    BRACKET_R  shift, and go to state 51


State 31

   18 param: type . ID COMMA param
   19      | type . ID

    ID  shift, and go to state 52


State 32

   54 expr: BRACKET_L . expr BRACKET_R
   64 cast: BRACKET_L . type BRACKET_R expr

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    BRACKET_L   shift, and go to state 32
    MINUS       shift, and go to state 33
    NOT         shift, and go to state 34
    TRUEVAL     shift, and go to state 35
    FALSEVAL    shift, and go to state 36
    NUM         shift, and go to state 37
    FLOAT       shift, and go to state 38
    ID          shift, and go to state 39

    type     go to state 53
    expr     go to state 54
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 33

   66 monop: MINUS . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 55
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 34

   67 monop: NOT . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 56
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 35

   62 expr: TRUEVAL .

    $default  reduce using rule 62 (expr)


State 36

   63 expr: FALSEVAL .

    $default  reduce using rule 63 (expr)


State 37

   61 expr: NUM .

    $default  reduce using rule 61 (expr)


State 38

   60 expr: FLOAT .

    $default  reduce using rule 60 (expr)


State 39

   81 var: ID .

    $default  reduce using rule 81 (var)


State 40

   16 globaldef: type ID LET expr . SEMICOLON
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    SEMICOLON  shift, and go to state 57
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 41

   57 expr: cast .

    $default  reduce using rule 57 (expr)


State 42

   59 expr: funcall .

    $default  reduce using rule 59 (expr)


State 43

   56 expr: monop .

    $default  reduce using rule 56 (expr)


State 44

   55 expr: binop .

    $default  reduce using rule 55 (expr)


State 45

   58 expr: var .
   65 funcall: var . BRACKET_L exprs BRACKET_R

    BRACKET_L  shift, and go to state 71

    $default  reduce using rule 58 (expr)


State 46

   11 fundefdec: EXTERN type ID BRACKET_L BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 72


State 47

   12 fundefdec: EXTERN type ID BRACKET_L param . BRACKET_R SEMICOLON

    BRACKET_R  shift, and go to state 73


State 48

    7 fundefdec: EXPORT type ID BRACKET_L BRACKET_R . BRACE_L funbody BRACE_R
    8          | EXPORT type ID BRACKET_L BRACKET_R . param BRACE_L funbody BRACE_R

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    BRACE_L     shift, and go to state 74

    param  go to state 75
    type   go to state 31


State 49

   14 globaldef: EXPORT type ID LET expr . SEMICOLON
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    SEMICOLON  shift, and go to state 76
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 50

    9 fundefdec: type ID BRACKET_L BRACKET_R BRACE_L . funbody BRACE_R

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    DO          shift, and go to state 77
    WHILE       shift, and go to state 78
    FOR         shift, and go to state 79
    IF          shift, and go to state 80
    RETURN      shift, and go to state 81
    EXTERN      shift, and go to state 82
    EXPORT      shift, and go to state 83
    ID          shift, and go to state 39

    fundefdec     go to state 84
    type          go to state 85
    funbody       go to state 86
    vardecs       go to state 87
    localfundefs  go to state 88
    statements    go to state 89
    stmt          go to state 90
    for           go to state 91
    if            go to state 92
    funcall       go to state 93
    var           go to state 94


State 51

   10 fundefdec: type ID BRACKET_L param BRACKET_R . BRACE_L funbody BRACE_R

    BRACE_L  shift, and go to state 95


State 52

   18 param: type ID . COMMA param
   19      | type ID .

    COMMA  shift, and go to state 96

    $default  reduce using rule 19 (param)


State 53

   64 cast: BRACKET_L type . BRACKET_R expr

    BRACKET_R  shift, and go to state 97


State 54

   54 expr: BRACKET_L expr . BRACKET_R
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    BRACKET_R  shift, and go to state 98
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 55

   66 monop: MINUS expr .
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 66 (monop)


State 56

   67 monop: NOT expr .
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 67 (monop)


State 57

   16 globaldef: type ID LET expr SEMICOLON .

    $default  reduce using rule 16 (globaldef)


State 58

   69 binop: expr MINUS . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 99
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 59

   68 binop: expr PLUS . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 100
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 60

   70 binop: expr STAR . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 101
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 61

   71 binop: expr SLASH . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 102
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 62

   72 binop: expr PERCENT . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 103
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 63

   73 binop: expr LE . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 104
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 64

   74 binop: expr LT . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 105
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 65

   75 binop: expr GE . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 106
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 66

   76 binop: expr GT . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 107
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 67

   77 binop: expr EQ . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 108
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 68

   78 binop: expr NE . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 109
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 69

   80 binop: expr AND . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 110
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 70

   79 binop: expr OR . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 111
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 71

   65 funcall: var BRACKET_L . exprs BRACKET_R

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    exprs    go to state 112
    expr     go to state 113
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 72

   11 fundefdec: EXTERN type ID BRACKET_L BRACKET_R SEMICOLON .

    $default  reduce using rule 11 (fundefdec)


State 73

   12 fundefdec: EXTERN type ID BRACKET_L param BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 114


State 74

    7 fundefdec: EXPORT type ID BRACKET_L BRACKET_R BRACE_L . funbody BRACE_R

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    DO          shift, and go to state 77
    WHILE       shift, and go to state 78
    FOR         shift, and go to state 79
    IF          shift, and go to state 80
    RETURN      shift, and go to state 81
    EXTERN      shift, and go to state 82
    EXPORT      shift, and go to state 83
    ID          shift, and go to state 39

    fundefdec     go to state 84
    type          go to state 85
    funbody       go to state 115
    vardecs       go to state 87
    localfundefs  go to state 88
    statements    go to state 89
    stmt          go to state 90
    for           go to state 91
    if            go to state 92
    funcall       go to state 93
    var           go to state 94


State 75

    8 fundefdec: EXPORT type ID BRACKET_L BRACKET_R param . BRACE_L funbody BRACE_R

    BRACE_L  shift, and go to state 116


State 76

   14 globaldef: EXPORT type ID LET expr SEMICOLON .

    $default  reduce using rule 14 (globaldef)


State 77

   42 stmt: DO . block WHILE BRACKET_L expr BRACKET_R SEMICOLON

    BRACE_L  shift, and go to state 117
    DO       shift, and go to state 77
    WHILE    shift, and go to state 78
    FOR      shift, and go to state 79
    IF       shift, and go to state 80
    RETURN   shift, and go to state 81
    ID       shift, and go to state 39

    stmt     go to state 118
    for      go to state 91
    if       go to state 92
    block    go to state 119
    funcall  go to state 93
    var      go to state 94


State 78

   41 stmt: WHILE . BRACKET_L expr BRACKET_R block

    BRACKET_L  shift, and go to state 120


State 79

   46 for: FOR . BRACKET_L TYPE_INT var LET expr COMMA expr COMMA expr BRACKET_R block
   47    | FOR . BRACKET_L TYPE_INT var LET expr COMMA expr BRACKET_R block

    BRACKET_L  shift, and go to state 121


State 80

   48 if: IF . BRACKET_L expr BRACKET_R block ELSE block
   49   | IF . BRACKET_L expr BRACKET_R block

    BRACKET_L  shift, and go to state 122


State 81

   45 stmt: RETURN . expr SEMICOLON

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 123
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 82

   11 fundefdec: EXTERN . type ID BRACKET_L BRACKET_R SEMICOLON
   12          | EXTERN . type ID BRACKET_L param BRACKET_R SEMICOLON

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4

    type  go to state 124


State 83

    7 fundefdec: EXPORT . type ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
    8          | EXPORT . type ID BRACKET_L BRACKET_R param BRACE_L funbody BRACE_R

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4

    type  go to state 125


State 84

   35 localfundefs: fundefdec . localfundefs
   36             | fundefdec .

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    EXTERN      shift, and go to state 82
    EXPORT      shift, and go to state 83

    $default  reduce using rule 36 (localfundefs)

    fundefdec     go to state 84
    type          go to state 126
    localfundefs  go to state 127


State 85

    9 fundefdec: type . ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type . ID BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R
   33 vardecs: type . ID LET expr SEMICOLON
   34        | type . ID SEMICOLON

    ID  shift, and go to state 128


State 86

    9 fundefdec: type ID BRACKET_L BRACKET_R BRACE_L funbody . BRACE_R

    BRACE_R  shift, and go to state 129


State 87

   24 funbody: vardecs . localfundefs statements
   25        | vardecs . localfundefs
   26        | vardecs . statements
   28        | vardecs .
   31 vardecs: vardecs . type ID LET expr SEMICOLON
   32        | vardecs . type ID SEMICOLON

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    DO          shift, and go to state 77
    WHILE       shift, and go to state 78
    FOR         shift, and go to state 79
    IF          shift, and go to state 80
    RETURN      shift, and go to state 81
    EXTERN      shift, and go to state 82
    EXPORT      shift, and go to state 83
    ID          shift, and go to state 39

    $default  reduce using rule 28 (funbody)

    fundefdec     go to state 84
    type          go to state 130
    localfundefs  go to state 131
    statements    go to state 132
    stmt          go to state 90
    for           go to state 91
    if            go to state 92
    funcall       go to state 93
    var           go to state 94


State 88

   27 funbody: localfundefs . statements
   29        | localfundefs .

    DO      shift, and go to state 77
    WHILE   shift, and go to state 78
    FOR     shift, and go to state 79
    IF      shift, and go to state 80
    RETURN  shift, and go to state 81
    ID      shift, and go to state 39

    $default  reduce using rule 29 (funbody)

    statements  go to state 133
    stmt        go to state 90
    for         go to state 91
    if          go to state 92
    funcall     go to state 93
    var         go to state 94


State 89

   30 funbody: statements .

    $default  reduce using rule 30 (funbody)


State 90

   37 statements: stmt . statements
   38           | stmt .

    DO      shift, and go to state 77
    WHILE   shift, and go to state 78
    FOR     shift, and go to state 79
    IF      shift, and go to state 80
    RETURN  shift, and go to state 81
    ID      shift, and go to state 39

    $default  reduce using rule 38 (statements)

    statements  go to state 134
    stmt        go to state 90
    for         go to state 91
    if          go to state 92
    funcall     go to state 93
    var         go to state 94


State 91

   44 stmt: for .

    $default  reduce using rule 44 (stmt)


State 92

   43 stmt: if .

    $default  reduce using rule 43 (stmt)


State 93

   40 stmt: funcall . SEMICOLON

    SEMICOLON  shift, and go to state 135


State 94

   39 stmt: var . LET expr SEMICOLON
   65 funcall: var . BRACKET_L exprs BRACKET_R

    BRACKET_L  shift, and go to state 71
    LET        shift, and go to state 136


State 95

   10 fundefdec: type ID BRACKET_L param BRACKET_R BRACE_L . funbody BRACE_R

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    DO          shift, and go to state 77
    WHILE       shift, and go to state 78
    FOR         shift, and go to state 79
    IF          shift, and go to state 80
    RETURN      shift, and go to state 81
    EXTERN      shift, and go to state 82
    EXPORT      shift, and go to state 83
    ID          shift, and go to state 39

    fundefdec     go to state 84
    type          go to state 85
    funbody       go to state 137
    vardecs       go to state 87
    localfundefs  go to state 88
    statements    go to state 89
    stmt          go to state 90
    for           go to state 91
    if            go to state 92
    funcall       go to state 93
    var           go to state 94


State 96

   18 param: type ID COMMA . param

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4

    param  go to state 138
    type   go to state 31


State 97

   64 cast: BRACKET_L type BRACKET_R . expr

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 139
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 98

   54 expr: BRACKET_L expr BRACKET_R .

    $default  reduce using rule 54 (expr)


State 99

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   69      | expr MINUS expr .
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 69 (binop)


State 100

   68 binop: expr . PLUS expr
   68      | expr PLUS expr .
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 68 (binop)


State 101

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   70      | expr STAR expr .
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 70 (binop)


State 102

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   71      | expr SLASH expr .
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 71 (binop)


State 103

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   72      | expr PERCENT expr .
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 72 (binop)


State 104

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   73      | expr LE expr .
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 73 (binop)


State 105

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   74      | expr LT expr .
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 74 (binop)


State 106

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   75      | expr GE expr .
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 75 (binop)


State 107

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   76      | expr GT expr .
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 76 (binop)


State 108

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   77      | expr EQ expr .
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 77 (binop)


State 109

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   78      | expr NE expr .
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 78 (binop)


State 110

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr
   80      | expr AND expr .

    $default  reduce using rule 80 (binop)


State 111

   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   79      | expr OR expr .
   80      | expr . AND expr

    $default  reduce using rule 79 (binop)


State 112

   65 funcall: var BRACKET_L exprs . BRACKET_R

    BRACKET_R  shift, and go to state 140


State 113

   52 exprs: expr . COMMA exprs
   53      | expr .
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    COMMA    shift, and go to state 141
    MINUS    shift, and go to state 58
    PLUS     shift, and go to state 59
    STAR     shift, and go to state 60
    SLASH    shift, and go to state 61
    PERCENT  shift, and go to state 62
    LE       shift, and go to state 63
    LT       shift, and go to state 64
    GE       shift, and go to state 65
    GT       shift, and go to state 66
    EQ       shift, and go to state 67
    NE       shift, and go to state 68
    AND      shift, and go to state 69
    OR       shift, and go to state 70

    $default  reduce using rule 53 (exprs)


State 114

   12 fundefdec: EXTERN type ID BRACKET_L param BRACKET_R SEMICOLON .

    $default  reduce using rule 12 (fundefdec)


State 115

    7 fundefdec: EXPORT type ID BRACKET_L BRACKET_R BRACE_L funbody . BRACE_R

    BRACE_R  shift, and go to state 142


State 116

    8 fundefdec: EXPORT type ID BRACKET_L BRACKET_R param BRACE_L . funbody BRACE_R

    TYPE_BOOL   shift, and go to state 1
    TYPE_INT    shift, and go to state 2
    TYPE_VOID   shift, and go to state 3
    TYPE_FLOAT  shift, and go to state 4
    DO          shift, and go to state 77
    WHILE       shift, and go to state 78
    FOR         shift, and go to state 79
    IF          shift, and go to state 80
    RETURN      shift, and go to state 81
    EXTERN      shift, and go to state 82
    EXPORT      shift, and go to state 83
    ID          shift, and go to state 39

    fundefdec     go to state 84
    type          go to state 85
    funbody       go to state 143
    vardecs       go to state 87
    localfundefs  go to state 88
    statements    go to state 89
    stmt          go to state 90
    for           go to state 91
    if            go to state 92
    funcall       go to state 93
    var           go to state 94


State 117

   50 block: BRACE_L . statements BRACE_R

    DO      shift, and go to state 77
    WHILE   shift, and go to state 78
    FOR     shift, and go to state 79
    IF      shift, and go to state 80
    RETURN  shift, and go to state 81
    ID      shift, and go to state 39

    statements  go to state 144
    stmt        go to state 90
    for         go to state 91
    if          go to state 92
    funcall     go to state 93
    var         go to state 94


State 118

   51 block: stmt .

    $default  reduce using rule 51 (block)


State 119

   42 stmt: DO block . WHILE BRACKET_L expr BRACKET_R SEMICOLON

    WHILE  shift, and go to state 145


State 120

   41 stmt: WHILE BRACKET_L . expr BRACKET_R block

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 146
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 121

   46 for: FOR BRACKET_L . TYPE_INT var LET expr COMMA expr COMMA expr BRACKET_R block
   47    | FOR BRACKET_L . TYPE_INT var LET expr COMMA expr BRACKET_R block

    TYPE_INT  shift, and go to state 147


State 122

   48 if: IF BRACKET_L . expr BRACKET_R block ELSE block
   49   | IF BRACKET_L . expr BRACKET_R block

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 148
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 123

   45 stmt: RETURN expr . SEMICOLON
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    SEMICOLON  shift, and go to state 149
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 124

   11 fundefdec: EXTERN type . ID BRACKET_L BRACKET_R SEMICOLON
   12          | EXTERN type . ID BRACKET_L param BRACKET_R SEMICOLON

    ID  shift, and go to state 150


State 125

    7 fundefdec: EXPORT type . ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
    8          | EXPORT type . ID BRACKET_L BRACKET_R param BRACE_L funbody BRACE_R

    ID  shift, and go to state 151


State 126

    9 fundefdec: type . ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type . ID BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R

    ID  shift, and go to state 152


State 127

   35 localfundefs: fundefdec localfundefs .

    $default  reduce using rule 35 (localfundefs)


State 128

    9 fundefdec: type ID . BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type ID . BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R
   33 vardecs: type ID . LET expr SEMICOLON
   34        | type ID . SEMICOLON

    BRACKET_L  shift, and go to state 21
    SEMICOLON  shift, and go to state 153
    LET        shift, and go to state 154


State 129

    9 fundefdec: type ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R .

    $default  reduce using rule 9 (fundefdec)


State 130

    9 fundefdec: type . ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type . ID BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R
   31 vardecs: vardecs type . ID LET expr SEMICOLON
   32        | vardecs type . ID SEMICOLON

    ID  shift, and go to state 155


State 131

   24 funbody: vardecs localfundefs . statements
   25        | vardecs localfundefs .

    DO      shift, and go to state 77
    WHILE   shift, and go to state 78
    FOR     shift, and go to state 79
    IF      shift, and go to state 80
    RETURN  shift, and go to state 81
    ID      shift, and go to state 39

    $default  reduce using rule 25 (funbody)

    statements  go to state 156
    stmt        go to state 90
    for         go to state 91
    if          go to state 92
    funcall     go to state 93
    var         go to state 94


State 132

   26 funbody: vardecs statements .

    $default  reduce using rule 26 (funbody)


State 133

   27 funbody: localfundefs statements .

    $default  reduce using rule 27 (funbody)


State 134

   37 statements: stmt statements .

    $default  reduce using rule 37 (statements)


State 135

   40 stmt: funcall SEMICOLON .

    $default  reduce using rule 40 (stmt)


State 136

   39 stmt: var LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 157
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 137

   10 fundefdec: type ID BRACKET_L param BRACKET_R BRACE_L funbody . BRACE_R

    BRACE_R  shift, and go to state 158


State 138

   18 param: type ID COMMA param .

    $default  reduce using rule 18 (param)


State 139

   64 cast: BRACKET_L type BRACKET_R expr .
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    $default  reduce using rule 64 (cast)


State 140

   65 funcall: var BRACKET_L exprs BRACKET_R .

    $default  reduce using rule 65 (funcall)


State 141

   52 exprs: expr COMMA . exprs

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    exprs    go to state 159
    expr     go to state 113
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 142

    7 fundefdec: EXPORT type ID BRACKET_L BRACKET_R BRACE_L funbody BRACE_R .

    $default  reduce using rule 7 (fundefdec)


State 143

    8 fundefdec: EXPORT type ID BRACKET_L BRACKET_R param BRACE_L funbody . BRACE_R

    BRACE_R  shift, and go to state 160


State 144

   50 block: BRACE_L statements . BRACE_R

    BRACE_R  shift, and go to state 161


State 145

   42 stmt: DO block WHILE . BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 162


State 146

   41 stmt: WHILE BRACKET_L expr . BRACKET_R block
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    BRACKET_R  shift, and go to state 163
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 147

   46 for: FOR BRACKET_L TYPE_INT . var LET expr COMMA expr COMMA expr BRACKET_R block
   47    | FOR BRACKET_L TYPE_INT . var LET expr COMMA expr BRACKET_R block

    ID  shift, and go to state 39

    var  go to state 164


State 148

   48 if: IF BRACKET_L expr . BRACKET_R block ELSE block
   49   | IF BRACKET_L expr . BRACKET_R block
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    BRACKET_R  shift, and go to state 165
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 149

   45 stmt: RETURN expr SEMICOLON .

    $default  reduce using rule 45 (stmt)


State 150

   11 fundefdec: EXTERN type ID . BRACKET_L BRACKET_R SEMICOLON
   12          | EXTERN type ID . BRACKET_L param BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 24


State 151

    7 fundefdec: EXPORT type ID . BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
    8          | EXPORT type ID . BRACKET_L BRACKET_R param BRACE_L funbody BRACE_R

    BRACKET_L  shift, and go to state 26


State 152

    9 fundefdec: type ID . BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type ID . BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R

    BRACKET_L  shift, and go to state 21


State 153

   34 vardecs: type ID SEMICOLON .

    $default  reduce using rule 34 (vardecs)


State 154

   33 vardecs: type ID LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 166
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 155

    9 fundefdec: type ID . BRACKET_L BRACKET_R BRACE_L funbody BRACE_R
   10          | type ID . BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R
   31 vardecs: vardecs type ID . LET expr SEMICOLON
   32        | vardecs type ID . SEMICOLON

    BRACKET_L  shift, and go to state 21
    SEMICOLON  shift, and go to state 167
    LET        shift, and go to state 168


State 156

   24 funbody: vardecs localfundefs statements .

    $default  reduce using rule 24 (funbody)


State 157

   39 stmt: var LET expr . SEMICOLON
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    SEMICOLON  shift, and go to state 169
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 158

   10 fundefdec: type ID BRACKET_L param BRACKET_R BRACE_L funbody BRACE_R .

    $default  reduce using rule 10 (fundefdec)


State 159

   52 exprs: expr COMMA exprs .

    $default  reduce using rule 52 (exprs)


State 160

    8 fundefdec: EXPORT type ID BRACKET_L BRACKET_R param BRACE_L funbody BRACE_R .

    $default  reduce using rule 8 (fundefdec)


State 161

   50 block: BRACE_L statements BRACE_R .

    $default  reduce using rule 50 (block)


State 162

   42 stmt: DO block WHILE BRACKET_L . expr BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 170
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 163

   41 stmt: WHILE BRACKET_L expr BRACKET_R . block

    BRACE_L  shift, and go to state 117
    DO       shift, and go to state 77
    WHILE    shift, and go to state 78
    FOR      shift, and go to state 79
    IF       shift, and go to state 80
    RETURN   shift, and go to state 81
    ID       shift, and go to state 39

    stmt     go to state 118
    for      go to state 91
    if       go to state 92
    block    go to state 171
    funcall  go to state 93
    var      go to state 94


State 164

   46 for: FOR BRACKET_L TYPE_INT var . LET expr COMMA expr COMMA expr BRACKET_R block
   47    | FOR BRACKET_L TYPE_INT var . LET expr COMMA expr BRACKET_R block

    LET  shift, and go to state 172


State 165

   48 if: IF BRACKET_L expr BRACKET_R . block ELSE block
   49   | IF BRACKET_L expr BRACKET_R . block

    BRACE_L  shift, and go to state 117
    DO       shift, and go to state 77
    WHILE    shift, and go to state 78
    FOR      shift, and go to state 79
    IF       shift, and go to state 80
    RETURN   shift, and go to state 81
    ID       shift, and go to state 39

    stmt     go to state 118
    for      go to state 91
    if       go to state 92
    block    go to state 173
    funcall  go to state 93
    var      go to state 94


State 166

   33 vardecs: type ID LET expr . SEMICOLON
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    SEMICOLON  shift, and go to state 174
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 167

   32 vardecs: vardecs type ID SEMICOLON .

    $default  reduce using rule 32 (vardecs)


State 168

   31 vardecs: vardecs type ID LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 175
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 169

   39 stmt: var LET expr SEMICOLON .

    $default  reduce using rule 39 (stmt)


State 170

   42 stmt: DO block WHILE BRACKET_L expr . BRACKET_R SEMICOLON
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    BRACKET_R  shift, and go to state 176
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 171

   41 stmt: WHILE BRACKET_L expr BRACKET_R block .

    $default  reduce using rule 41 (stmt)


State 172

   46 for: FOR BRACKET_L TYPE_INT var LET . expr COMMA expr COMMA expr BRACKET_R block
   47    | FOR BRACKET_L TYPE_INT var LET . expr COMMA expr BRACKET_R block

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 177
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 173

   48 if: IF BRACKET_L expr BRACKET_R block . ELSE block
   49   | IF BRACKET_L expr BRACKET_R block .

    ELSE  shift, and go to state 178

    ELSE      [reduce using rule 49 (if)]
    $default  reduce using rule 49 (if)


State 174

   33 vardecs: type ID LET expr SEMICOLON .

    $default  reduce using rule 33 (vardecs)


State 175

   31 vardecs: vardecs type ID LET expr . SEMICOLON
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    SEMICOLON  shift, and go to state 179
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 176

   42 stmt: DO block WHILE BRACKET_L expr BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 180


State 177

   46 for: FOR BRACKET_L TYPE_INT var LET expr . COMMA expr COMMA expr BRACKET_R block
   47    | FOR BRACKET_L TYPE_INT var LET expr . COMMA expr BRACKET_R block
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    COMMA    shift, and go to state 181
    MINUS    shift, and go to state 58
    PLUS     shift, and go to state 59
    STAR     shift, and go to state 60
    SLASH    shift, and go to state 61
    PERCENT  shift, and go to state 62
    LE       shift, and go to state 63
    LT       shift, and go to state 64
    GE       shift, and go to state 65
    GT       shift, and go to state 66
    EQ       shift, and go to state 67
    NE       shift, and go to state 68
    AND      shift, and go to state 69
    OR       shift, and go to state 70


State 178

   48 if: IF BRACKET_L expr BRACKET_R block ELSE . block

    BRACE_L  shift, and go to state 117
    DO       shift, and go to state 77
    WHILE    shift, and go to state 78
    FOR      shift, and go to state 79
    IF       shift, and go to state 80
    RETURN   shift, and go to state 81
    ID       shift, and go to state 39

    stmt     go to state 118
    for      go to state 91
    if       go to state 92
    block    go to state 182
    funcall  go to state 93
    var      go to state 94


State 179

   31 vardecs: vardecs type ID LET expr SEMICOLON .

    $default  reduce using rule 31 (vardecs)


State 180

   42 stmt: DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON .

    $default  reduce using rule 42 (stmt)


State 181

   46 for: FOR BRACKET_L TYPE_INT var LET expr COMMA . expr COMMA expr BRACKET_R block
   47    | FOR BRACKET_L TYPE_INT var LET expr COMMA . expr BRACKET_R block

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 183
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 182

   48 if: IF BRACKET_L expr BRACKET_R block ELSE block .

    $default  reduce using rule 48 (if)


State 183

   46 for: FOR BRACKET_L TYPE_INT var LET expr COMMA expr . COMMA expr BRACKET_R block
   47    | FOR BRACKET_L TYPE_INT var LET expr COMMA expr . BRACKET_R block
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    BRACKET_R  shift, and go to state 184
    COMMA      shift, and go to state 185
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 184

   47 for: FOR BRACKET_L TYPE_INT var LET expr COMMA expr BRACKET_R . block

    BRACE_L  shift, and go to state 117
    DO       shift, and go to state 77
    WHILE    shift, and go to state 78
    FOR      shift, and go to state 79
    IF       shift, and go to state 80
    RETURN   shift, and go to state 81
    ID       shift, and go to state 39

    stmt     go to state 118
    for      go to state 91
    if       go to state 92
    block    go to state 186
    funcall  go to state 93
    var      go to state 94


State 185

   46 for: FOR BRACKET_L TYPE_INT var LET expr COMMA expr COMMA . expr BRACKET_R block

    BRACKET_L  shift, and go to state 32
    MINUS      shift, and go to state 33
    NOT        shift, and go to state 34
    TRUEVAL    shift, and go to state 35
    FALSEVAL   shift, and go to state 36
    NUM        shift, and go to state 37
    FLOAT      shift, and go to state 38
    ID         shift, and go to state 39

    expr     go to state 187
    cast     go to state 41
    funcall  go to state 42
    monop    go to state 43
    binop    go to state 44
    var      go to state 45


State 186

   47 for: FOR BRACKET_L TYPE_INT var LET expr COMMA expr BRACKET_R block .

    $default  reduce using rule 47 (for)


State 187

   46 for: FOR BRACKET_L TYPE_INT var LET expr COMMA expr COMMA expr . BRACKET_R block
   68 binop: expr . PLUS expr
   69      | expr . MINUS expr
   70      | expr . STAR expr
   71      | expr . SLASH expr
   72      | expr . PERCENT expr
   73      | expr . LE expr
   74      | expr . LT expr
   75      | expr . GE expr
   76      | expr . GT expr
   77      | expr . EQ expr
   78      | expr . NE expr
   79      | expr . OR expr
   80      | expr . AND expr

    BRACKET_R  shift, and go to state 188
    MINUS      shift, and go to state 58
    PLUS       shift, and go to state 59
    STAR       shift, and go to state 60
    SLASH      shift, and go to state 61
    PERCENT    shift, and go to state 62
    LE         shift, and go to state 63
    LT         shift, and go to state 64
    GE         shift, and go to state 65
    GT         shift, and go to state 66
    EQ         shift, and go to state 67
    NE         shift, and go to state 68
    AND        shift, and go to state 69
    OR         shift, and go to state 70


State 188

   46 for: FOR BRACKET_L TYPE_INT var LET expr COMMA expr COMMA expr BRACKET_R . block

    BRACE_L  shift, and go to state 117
    DO       shift, and go to state 77
    WHILE    shift, and go to state 78
    FOR      shift, and go to state 79
    IF       shift, and go to state 80
    RETURN   shift, and go to state 81
    ID       shift, and go to state 39

    stmt     go to state 118
    for      go to state 91
    if       go to state 92
    block    go to state 189
    funcall  go to state 93
    var      go to state 94


State 189

   46 for: FOR BRACKET_L TYPE_INT var LET expr COMMA expr COMMA expr BRACKET_R block .

    $default  reduce using rule 46 (for)
