<!--
 This XML file is the "command center" of your compiler.
 Here, we define the structure of the abstract syntax tree as well as the
 traversals to process it.
-->

<?xml-stylesheet href="ast.html.xsl" type="text/xsl" name="HTML" media="screen"?>
<definition version="0.9" >

<!--
  =========================================================================
-->

  <attributetypes>
    <type name="String" ctype="char*" init="NULL" copy="function" />
    <type name="Int" ctype="int" init="0" copy="literal" />
    <type name="Bool" ctype="bool" init="FALSE" copy="literal" />
    <type name="Float" ctype="float" init="0.0" copy="literal" />
    <type name="BinOp" ctype="binop" init="BO_unknown" copy="literal" />
    <type name="MonOp" ctype="monop" init="MO_unknown" copy="literal" />
    <type name="Link" ctype="node*" init="NULL" copy="lookup" />
    <type name="CompilerPhase" ctype="compiler_phase_t" init="PH_initial" copy="literal" />

    <type name="BasicType" ctype="basictype" init="BT_unknown" copy="literal"/>
  </attributetypes>

<!--
  =========================================================================
-->

  <phases>
    <!-- id is the short id of the traversal
         name is a descriptive name
         default gives the default traversal mode
           user  a user defined function
           sons  TravSons
           none  TravNone
           error TravError
         include the include file needed for the traversal
    -->
    <general>
      <traversal id="PRT" name="Print Syntax Tree" default="user" include="print.h" />
      <traversal id="COPY" name="Copy Syntax Tree" default="user" include="copy_node.h" />
      <traversal id="FREE" name="Free Syntax Tree" default="user" include="free_node.h" />
      <traversal id="CHK" name="Check Syntax Tree" default="user" include="check.h" />

      <traversal id="TF" name="Transform For-loop" default="sons" include="transform_for.h">
        <travuser>
          <node name="FunDefDec"/>
          <node name="For"/>
          <node name="Var"/>
        </travuser>
      </traversal>

      <traversal id="MS" name="Make Symboltable" default="sons" include="make_st.h">
        <travuser>
          <node name="Program"/>
          <node name="FunDefDec"/>
          <node name="For"/>
          <node name="VarDec"/>
          <node name="GlobalDef"/>
          <node name="GlobalDec"/>
        </travuser>
      </traversal>

      <traversal id="PS" name="Print Symboltable" default="sons" include="print_st.h">
        <travuser>
          <node name="SymbolTable"/>
          <node name="SymbolTableEntry"/>
        </travuser>
      </traversal>

      <traversal id="TG" name="Transform Global Init" default="sons" include="var_init_trans_global.h">
        <travuser>
          <node name="Program"/>
          <node name="GlobalDef"/>
        </travuser>
      </traversal>

    </general>
  </phases>

<!--
  =========================================================================
-->

  <nodesets>

    <nodeset name="Expr">
      <target>
        <node name="BinOp"/>
        <node name="MonOp"/>
        <node name="Cast"/>
        <node name="FunCall"/>
        <node name="Var"/>
        <node name="Num"/>
        <node name="Float"/>
        <node name="Bool"/>
      </target>
    </nodeset>

    <nodeset name="Stmt">
      <target>
        <node name="Assign" />
        <node name="FunCall" />
        <node name="While"/>
        <node name="DoWhile"/>
        <node name="If"/>
        <node name="For"/>
        <node name="Return"/>
      </target>
    </nodeset>

    <nodeset name="Declaration">
      <target>
        <node name="FunDefDec"/>
        <node name="GlobalDec"/>
        <node name="GlobalDef"/>
      </target>
    </nodeset>
  </nodesets>

<!--
  =========================================================================
-->

  <syntaxtree>
<!--
  DM-Node Declarations:
 -->
    <node name="Program">
      <description>Root node of the ast</description>
      <sons>
        <son name="Declarations">
          <description>Declarations in the program</description>
          <targets>
            <target mandatory="yes">
              <node name="Declarations"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="SymbolTable">
          <description>Global symboltable</description>
          <targets>
            <target mandatory="no">
              <node name="SymbolTable"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

    <node name="Declarations">
      <description>Represents (sequence of) declarations</description>
      <sons>
        <son name="Declaration">
          <description>first declaration in sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="Declaration"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <description>remaining declarations in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Declarations"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

    <node name="FunDefDec">
      <description>Definition of a function definition or declaration</description>
      <sons>
        <son name="Param">
          <description>Parameters of the function header</description>
          <targets>
            <target mandatory="no">
              <node name="Param"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>        
        <son name="Body">
          <description>Body of the definition</description>
          <targets>
            <target mandatory="no">
              <node name="FunBody"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="SymbolTable">
          <description>Local symboltable of the function</description>
          <targets>
            <target mandatory="no">
              <node name="SymbolTable"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Export">
          <description>Boolean whether the function is exported</description>
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="RetType">
          <description>Return type of the header</description>
          <type name="BasicType">
            <targets>
              <target mandatory="yes">
                <any/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Id">
          <description> Name of the identifier</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="FunBody">
      <description>Content of a function body</description>
      <sons>
        <son name="VarDec">
          <description>Link to a sequence of variable declarations</description>
          <targets>
            <target mandatory="no">
              <node name="VarDec"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="LocalFunDefs">
          <description>Link to a sequence of local function definitions</description>
          <targets>
            <target mandatory="no">
              <node name="LocalFunDefs"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Statements">
          <description>Link to a sequence of statements</description>
          <targets>
            <target mandatory="no">
              <node name="Statements"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

    <node name="VarDec">
      <description>A single variable declaration</description>
      <sons>
        <son name="Expr">
          <description>right hand side expression</description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
          <description>Next vardec in the sequence</description>
          <targets>
            <target mandatory="no">
              <node name="VarDec" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Type">
          <description>Variable type</description>
          <type name="BasicType">
            <targets>
              <target mandatory="yes">
                <any/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Id">
          <description> Name of the identifier</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="LocalFunDefs">
      <description>Sequence of nested function definitions</description>
      <sons>
        <son name="First">
          <description>Link to the first node of definitions</description>
          <targets>
            <target mandatory="yes">
              <node name="FunDefDec"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <description>Next item in the sequence</description>
          <targets>
            <target mandatory="no">
              <node name="LocalFunDefs"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

    <node name="GlobalDec">
      <description>A global declarator</description>
      <sons>
      </sons>
      <attributes>
        <description>Type of declarated</description>
        <attribute name="Type">
          <type name="BasicType">
            <targets>
              <target mandatory="yes">
                <any/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Id">
          <description> Name of the identifier</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="GlobalDef">
      <description>Definition of variable</description>
      <sons>
        <son name="Expr">
          <description>Assignment of variable</description>
          <targets>
            <target mandatory="no">
              <set name="Expr"/>
                <phases>
                  <all/>
                </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>Type of declarated</description>
        <attribute name="Type">
          <type name="BasicType">
            <targets>
              <target mandatory="yes">
                <any/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Export">
          <description>Boolean whether the definition is exported</description>
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Id">
          <description> Name of the identifier</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="Param">
      <description>A parameter with possible siblings</description>
      <sons>
        <son name="Next">
          <description>Next parameter in the sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Param"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>Type of the parameter</description>
        <attribute name="Type">
          <type name="BasicType">
            <targets>
              <target mandatory="yes">
                <any/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Id">
          <description> Name of the identifier</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="Var">
      <description>Node which holds a variable</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Name">
          <description> Name of the identifier</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Link">
          <description>Link to a symbol table entry</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

<!--
 Node Statements:
-->
     <node name="Statements">
      <description>represents (sequence of) statements</description>
      <sons>
        <son name="First">
          <description>first statement in sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="Stmt" />
              <phases>
                <all />
              </phases>
             </target>
          </targets>
        </son>
        <son name="Next">
          <description>remaining statements in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Statements" />
              <phases>
                <all />
              </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node Assign:
-->
     <node name="Assign">
      <description>represents assignment statement</description>
      <sons>
        <son name="Expr">
          <description>right hand side expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Id">
          <description>Id of the to be assigned variable</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="FunCall">
      <description>Represents a function call</description>
      <sons>
        <son name="Exprs">
          <description>Expressions provided with the function call</description>
          <targets>
            <target mandatory="no">
              <node name="Exprs"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Id">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="If">
      <description>If statement node</description>
      <sons>
        <son name="Expr">
          <description>Expression of the if-statement</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Block">
          <description>Block of code in if-statement</description>
          <targets>
            <target mandatory="yes">
              <node name="Statements"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="ElseBlock">
          <description>Else block of code in if-statement</description>
          <targets>
            <target mandatory="no">
              <node name="Statements"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

    <node name="While">
      <description>While statement node</description>
      <sons>
        <son name="Expr">
          <description>Expression of the while-statement</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Block">
          <description>Block of code in while-statement</description>
          <targets>
            <target mandatory="yes">
              <node name="Statements"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

    <node name="DoWhile">
      <description>DoWhile statement node</description>
      <sons>
        <son name="Expr">
          <description>Expression of the while-statement</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Block">
          <description>Block of code in while-statement</description>
          <targets>
            <target mandatory="yes">
              <node name="Statements"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

    <node name="For">
      <sons>
        <son name="ExprStart">
          <description>Expression for the starting value</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="ExprStop">
          <description>Expression on when to stop the loop</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="ExprIncr">
          <description>Expression on how to e</description>
          <targets>
            <target mandatory="no">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Block">
          <description>Block of code in for-loop</description>
          <targets>
            <target mandatory="yes">
              <node name="Statements"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Id">
          <description>Id of the induction variable</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="Return">
      <description>Return expression</description>
      <sons>
        <son name="Expr">
          <description>Expression to be returned</description>
          <targets>
            <target mandatory="no">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>

    <node name="Exprs">
      <description>Sequence of expressions</description>
      <sons>
        <son name="First">
          <description>First expression in the sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <description>Next of the expressions in the sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Exprs"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--
 Node BinOp:
-->
    <node name="BinOp">
      <description>represents binary operator application</description>
      <sons>
        <son name="Left">
          <description>left operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
        <son name="Right">
          <description>right operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>operator type</description>
        <attribute name="Op">
          <type name="BinOp">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="MonOp">
      <description>Mono operator application</description>
      <sons>
        <son name="Expr">
          <description>Expression on which to perform the operator</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>operator type</description>
        <attribute name="Op">
          <type name="MonOp">
            <targets>
              <target mandatory="yes">
                <any/>
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="Cast">
      <description>Respresents a casting application</description>
      <sons>
        <son name="Expr">
          <description>Expression which to cast</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="CastType">
          <description>Type which to cast to</description>
          <type name="BasicType">
            <targets>
              <target mandatory="yes">
                <any/>
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

<!--
 Node Num:
-->
   <node name="Num">
      <description>represents integer constant</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Float:
-->
    <node name="Float">
      <description>represents floating point constant</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Float">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Bool:
-->
    <node name="Bool">
      <description>represents Boolean constant (true/false)</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                 <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node SymbolTable:
-->
    <node name="SymbolTable">
      <description>The root of a symbol table linked list</description>
      <sons>
        <son name="Head">
          <targets>
            <target mandatory="no">
              <node name="SymbolTableEntry"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Parent">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>

    <node name="SymbolTableEntry">
      <description>represents symbol table entry</description>
      <sons>
        <son name="Next">
          <description>Next node in the symboltable-list</description>
          <targets>
            <target mandatory="no">
              <node name="SymbolTableEntry"/>
              <phases>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Type">
          <type name="BasicType">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Function">
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Params">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--
 Node Error:
-->
    <node name="Error">
      <description>represents internal Error representation constructor</description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no" >
              <node name="Error" />
                <phases>
                  <all />
                </phases>
             </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="message">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
        <attribute name="anyphase">
          <type name="CompilerPhase">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
               </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>

  </syntaxtree>

</definition>
