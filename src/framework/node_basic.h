
/**
 * @file node_basic.h
 *
 * Functions to allocate node structures
 * 
 * THIS FILE HAS BEEN GENERATED USING 
 * $Id: node_basic.h.xsl 14593 2006-01-31 17:09:55Z cg $.
 * DO NOT EDIT THIS FILE AS MIGHT BE CHANGED IN A LATER VERSION.
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN!
 *
 */

#ifndef _SAC_NODE_BASIC_H_
#define _SAC_NODE_BASIC_H_

#include "types.h"


#define _SAC_AST_VERSION_ "0.9"


/*****************************************************************************
 * macros and functions for N_declarations
 *****************************************************************************/

#define DECLARATIONS_DECLARATION( n) ((n)->sons.N_declarations->Declaration)
#define DECLARATIONS_NEXT( n) ((n)->sons.N_declarations->Next)
extern node *TBmakeDeclarations (node * Declaration, node * Next);

/*****************************************************************************
 * macros and functions for N_fundec
 *****************************************************************************/

#define FUNDEC_FUNHEADER( n) ((n)->sons.N_fundec->FunHeader)
extern node *TBmakeFundec (node * FunHeader);

/*****************************************************************************
 * macros and functions for N_fundef
 *****************************************************************************/

#define FUNDEF_HEADER( n) ((n)->sons.N_fundef->Header)
#define FUNDEF_BODY( n) ((n)->sons.N_fundef->Body)
#define FUNDEF_EXPORT( n) ((n)->attribs.N_fundef->Export)
extern node *TBmakeFundef (bool Export, node * Header, node * Body);

/*****************************************************************************
 * macros and functions for N_funheader
 *****************************************************************************/

#define FUNHEADER_PARAMS( n) ((n)->sons.N_funheader->Params)
#define FUNHEADER_ID( n) ((n)->sons.N_funheader->Id)
#define FUNHEADER_RETTYPE( n) ((n)->attribs.N_funheader->RetType)
extern node *TBmakeFunheader (RetType, node * Params, node * Id);

/*****************************************************************************
 * macros and functions for N_funbody
 *****************************************************************************/

#define FUNBODY_VARDECS( n) ((n)->sons.N_funbody->VarDecs)
#define FUNBODY_LOCALFUNDEFS( n) ((n)->sons.N_funbody->LocalFunDefs)
#define FUNBODY_STATEMENTS( n) ((n)->sons.N_funbody->Statements)
extern node *TBmakeFunbody (node * VarDecs, node * LocalFunDefs,
			    node * Statements);

/*****************************************************************************
 * macros and functions for N_vardecs
 *****************************************************************************/

#define VARDECS_FIRST( n) ((n)->sons.N_vardecs->First)
#define VARDECS_NEXT( n) ((n)->sons.N_vardecs->Next)
extern node *TBmakeVardecs (node * First, node * Next);

/*****************************************************************************
 * macros and functions for N_vardec
 *****************************************************************************/

#define VARDEC_ID( n) ((n)->sons.N_vardec->Id)
#define VARDEC_ASSIGN( n) ((n)->sons.N_vardec->Assign)
#define VARDEC_TYPE( n) ((n)->attribs.N_vardec->Type)
extern node *TBmakeVardec (basictype Type, node * Id, node * Assign);

/*****************************************************************************
 * macros and functions for N_localfundefs
 *****************************************************************************/

#define LOCALFUNDEFS_FIRST( n) ((n)->sons.N_localfundefs->First)
#define LOCALFUNDEFS_NEXT( n) ((n)->sons.N_localfundefs->Next)
extern node *TBmakeLocalfundefs (node * First, node * Next);

/*****************************************************************************
 * macros and functions for N_globaldec
 *****************************************************************************/

#define GLOBALDEC_ID( n) ((n)->sons.N_globaldec->Id)
#define GLOBALDEC_TYPE( n) ((n)->attribs.N_globaldec->Type)
extern node *TBmakeGlobaldec (basictype Type, node * Id);

/*****************************************************************************
 * macros and functions for N_globaldef
 *****************************************************************************/

#define GLOBALDEF_ID( n) ((n)->sons.N_globaldef->Id)
#define GLOBALDEF_ASSIGN( n) ((n)->sons.N_globaldef->Assign)
#define GLOBALDEF_TYPE( n) ((n)->attribs.N_globaldef->Type)
#define GLOBALDEF_EXPORT( n) ((n)->attribs.N_globaldef->Export)
extern node *TBmakeGlobaldef (basictype Type, bool Export, node * Id,
			      node * Assign);

/*****************************************************************************
 * macros and functions for N_params
 *****************************************************************************/

#define PARAMS_FIRST( n) ((n)->sons.N_params->First)
#define PARAMS_NEXT( n) ((n)->sons.N_params->Next)
extern node *TBmakeParams (node * First, node * Next);

/*****************************************************************************
 * macros and functions for N_param
 *****************************************************************************/

#define PARAM_ID( n) ((n)->sons.N_param->Id)
#define PARAM_TYPE( n) ((n)->attribs.N_param->Type)
extern node *TBmakeParam (basictype Type, node * Id);

/*****************************************************************************
 * macros and functions for N_id
 *****************************************************************************/

#define ID_NAME( n) ((n)->attribs.N_id->Name)
extern node *TBmakeId ();

/*****************************************************************************
 * macros and functions for N_stmts
 *****************************************************************************/

#define STMTS_STMT( n) ((n)->sons.N_stmts->Stmt)
#define STMTS_NEXT( n) ((n)->sons.N_stmts->Next)
extern node *TBmakeStmts (node * Stmt, node * Next);

/*****************************************************************************
 * macros and functions for N_assign
 *****************************************************************************/

#define ASSIGN_ID( n) ((n)->sons.N_assign->Id)
#define ASSIGN_EXPR( n) ((n)->sons.N_assign->Expr)
extern node *TBmakeAssign (node * Id, node * Expr);

/*****************************************************************************
 * macros and functions for N_funcall
 *****************************************************************************/

#define FUNCALL_ID( n) ((n)->sons.N_funcall->Id)
#define FUNCALL_EXPRS( n) ((n)->sons.N_funcall->Exprs)
extern node *TBmakeFuncall (node * Id, node * Exprs);

/*****************************************************************************
 * macros and functions for N_if
 *****************************************************************************/

#define IF_EXPR( n) ((n)->sons.N_if->Expr)
#define IF_BLOCK( n) ((n)->sons.N_if->Block)
#define IF_ELSEBLOCK( n) ((n)->sons.N_if->ElseBlock)
extern node *TBmakeIf (node * Expr, node * Block, node * ElseBlock);

/*****************************************************************************
 * macros and functions for N_while
 *****************************************************************************/

#define WHILE_EXPR( n) ((n)->sons.N_while->Expr)
#define WHILE_BLOCK( n) ((n)->sons.N_while->Block)
extern node *TBmakeWhile (node * Expr, node * Block);

/*****************************************************************************
 * macros and functions for N_for
 *****************************************************************************/

#define FOR_ASSIGN( n) ((n)->sons.N_for->Assign)
#define FOR_EXPRSTOP( n) ((n)->sons.N_for->ExprStop)
#define FOR_EXPRINCR( n) ((n)->sons.N_for->ExprIncr)
#define FOR_BLOCK( n) ((n)->sons.N_for->Block)
extern node *TBmakeFor (node * Assign, node * ExprStop, node * ExprIncr,
			node * Block);

/*****************************************************************************
 * macros and functions for N_return
 *****************************************************************************/

#define RETURN_EXPR( n) ((n)->sons.N_return->Expr)
extern node *TBmakeReturn (node * Expr);

/*****************************************************************************
 * macros and functions for N_exprs
 *****************************************************************************/

#define EXPRS_FIRST( n) ((n)->sons.N_exprs->First)
#define EXPRS_NEXT( n) ((n)->sons.N_exprs->Next)
extern node *TBmakeExprs (node * First, node * Next);

/*****************************************************************************
 * macros and functions for N_binop
 *****************************************************************************/

#define BINOP_LEFT( n) ((n)->sons.N_binop->Left)
#define BINOP_RIGHT( n) ((n)->sons.N_binop->Right)
#define BINOP_OP( n) ((n)->attribs.N_binop->Op)
extern node *TBmakeBinop (binop Op, node * Left, node * Right);

/*****************************************************************************
 * macros and functions for N_monop
 *****************************************************************************/

#define MONOP_EXPR( n) ((n)->sons.N_monop->Expr)
#define MONOP_OP( n) ((n)->attribs.N_monop->Op)
extern node *TBmakeMonop (Op, node * Expr);

/*****************************************************************************
 * macros and functions for N_cast
 *****************************************************************************/

#define CAST_EXPR( n) ((n)->sons.N_cast->Expr)
#define CAST_CASTTYPE( n) ((n)->attribs.N_cast->CastType)
extern node *TBmakeCast (basictype CastType, node * Expr);

/*****************************************************************************
 * macros and functions for N_num
 *****************************************************************************/

#define NUM_VALUE( n) ((n)->attribs.N_num->Value)
extern node *TBmakeNum (int Value);

/*****************************************************************************
 * macros and functions for N_float
 *****************************************************************************/

#define FLOAT_VALUE( n) ((n)->attribs.N_float->Value)
extern node *TBmakeFloat ();

/*****************************************************************************
 * macros and functions for N_bool
 *****************************************************************************/

#define BOOL_VALUE( n) ((n)->attribs.N_bool->Value)
extern node *TBmakeBool (bool Value);

/*****************************************************************************
 * macros and functions for N_error
 *****************************************************************************/

#define ERROR_NEXT( n) ((n)->sons.N_error->Next)
#define ERROR_MESSAGE( n) ((n)->attribs.N_error->message)
#define ERROR_ANYPHASE( n) ((n)->attribs.N_error->anyphase)
extern node *TBmakeError (char *message, compiler_phase_t anyphase,
			  node * Next);

#endif /* _SAC_NODE_BASIC_H_ */
